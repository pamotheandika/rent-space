// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	spaces "RentSpace/businesses/spaces"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// AddSpace provides a mock function with given fields: ctx, space
func (_m *Usecase) AddSpace(ctx context.Context, space *spaces.Domain) error {
	ret := _m.Called(ctx, space)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *spaces.Domain) error); ok {
		r0 = rf(ctx, space)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSpace provides a mock function with given fields: ctx
func (_m *Usecase) GetAllSpace(ctx context.Context) ([]spaces.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []spaces.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []spaces.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]spaces.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusSpace provides a mock function with given fields: ctx, IDSpace
func (_m *Usecase) UpdateStatusSpace(ctx context.Context, IDSpace int) error {
	ret := _m.Called(ctx, IDSpace)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, IDSpace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
