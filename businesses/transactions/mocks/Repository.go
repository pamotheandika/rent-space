// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	transactions "RentSpace/businesses/transactions"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddTransaction provides a mock function with given fields: ctx, transaction
func (_m *Repository) AddTransaction(ctx context.Context, transaction *transactions.Domain) error {
	ret := _m.Called(ctx, transaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *transactions.Domain) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTransaction provides a mock function with given fields: ctx
func (_m *Repository) GetAllTransaction(ctx context.Context) ([]transactions.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []transactions.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []transactions.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusTransaction provides a mock function with given fields: ctc, IDTransaction
func (_m *Repository) UpdateStatusTransaction(ctc context.Context, IDTransaction int) error {
	ret := _m.Called(ctc, IDTransaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctc, IDTransaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
