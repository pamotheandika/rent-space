// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	owners "RentSpace/businesses/owners"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddOwner provides a mock function with given fields: ctx, owner
func (_m *Repository) AddOwner(ctx context.Context, owner *owners.Domain) error {
	ret := _m.Called(ctx, owner)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *owners.Domain) error); ok {
		r0 = rf(ctx, owner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllOwner provides a mock function with given fields: ctx
func (_m *Repository) GetAllOwner(ctx context.Context) ([]owners.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []owners.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []owners.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]owners.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *Repository) GetByEmail(ctx context.Context, email string) (owners.Domain, error) {
	ret := _m.Called(ctx, email)

	var r0 owners.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) owners.Domain); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(owners.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOwnerByCity provides a mock function with given fields: ctx, city
func (_m *Repository) GetOwnerByCity(ctx context.Context, city string) ([]owners.Domain, error) {
	ret := _m.Called(ctx, city)

	var r0 []owners.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) []owners.Domain); ok {
		r0 = rf(ctx, city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]owners.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
